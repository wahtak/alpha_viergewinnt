#!/bin/env python
import click
import logging

from alpha_viergewinnt.game import board
from alpha_viergewinnt.game.board import Player
from alpha_viergewinnt.game import tictactoe, viergewinnt
from alpha_viergewinnt.player.random_player import RandomPlayer
from alpha_viergewinnt.player.human_player import HumanPlayer
from alpha_viergewinnt.player.pure_mcts_player import PureMctsPlayer, create_random_choice_strategy
from alpha_viergewinnt.player.alpha_player import AlphaPlayer, MlpEstimator, Evaluator
from alpha_viergewinnt.match import ComparisonMatch


def create_pure_mcts_player(player, **kwargs):
    return PureMctsPlayer(
        player=player,
        selection_strategy=create_random_choice_strategy(),
        expansion_strategy=create_random_choice_strategy(),
        simulation_strategy=create_random_choice_strategy(),
        iterations=30,
        rollouts=30)


def create_alpha_player(game, player, filename, mcts_steps, **kwargs):
    estimator = MlpEstimator(board_size=game.board_size, actions=game.get_all_moves(), filename=filename)
    estimator.load()
    evaluator = Evaluator(estimator, player)
    return AlphaPlayer(evaluator, mcts_steps=mcts_steps)


GAME_FACTORIES = {
    'tictactoe': tictactoe.Game,
    'viergewinnt': viergewinnt.Game,
}

PLAYER_FACTORIES = {
    'random': RandomPlayer,
    'human': HumanPlayer,
    'pure_mcts': create_pure_mcts_player,
    'alpha': create_alpha_player
}


@click.command()
@click.option('--game', required=True, type=click.Choice(GAME_FACTORIES.keys()), help='Game to be played')
@click.option('-x', required=True, type=click.Choice(PLAYER_FACTORIES.keys()), help='Strategy for player X')
@click.option('-o', required=True, type=click.Choice(PLAYER_FACTORIES.keys()), help='Strategy for player O')
@click.option('--mcts-steps', type=int, default=100, help='Number of MCTS steps per move for alpha player')
def cmd(game, x, o, mcts_steps):
    filename = 'resources/{}_mlp'.format(game)

    Game = GAME_FACTORIES[game]
    PlayerX = PLAYER_FACTORIES[x]
    PlayerO = PLAYER_FACTORIES[o]

    game = Game()
    player_x = PlayerX(game=game, player=Player.X, filename=filename, mcts_steps=mcts_steps)
    player_o = PlayerO(game=game, player=Player.O, filename=filename, mcts_steps=mcts_steps)

    match = ComparisonMatch(game=game, players={Player.X: player_x, Player.O: player_o})
    match.play()


if __name__ == '__main__':
    logging.basicConfig(level=logging.DEBUG, format=None)
    board.SEPERATOR = ' '
    cmd()
